root = "."
tmp_dir = "tmp"

[build]

# 只须要写你平时编译应用的shell命令。你也能够应用 `make`

cmd = "go build -o tmp\main.exe ."
# 由`cmd`命令失去的二进制文件名
# Windows平台示例：bin = "tmp\main.exe"
bin = "tmp\main.exe"
# 自定义执行程序的命令，能够增加额定的编译标识例如增加 GIN_MODE=release
# Windows平台示例：full_bin = "tmp\main.exe"
full_bin = "tmp\main.exe ./conf/config.yml"
# 监听以下文件扩展名的文件.
include_ext = ["go", "tpl", "tmpl", "html"]
# 疏忽这些文件扩展名或目录
exclude_dir = ["assets", "tmp", "vendor", "frontend/node_modules"]
# 监听以下指定目录的文件
include_dir = []
# 排除以下文件
exclude_file = []
# 如果文件更改过于频繁，则没有必要在每次更改时都触发构建。能够设置触发构建的延迟时间
delay = 1000 # ms
# 产生构建谬误时，进行运行旧的二进制文件。
stop_on_error = true
# air的日志文件名，该日志文件搁置在你的`tmp_dir`中
log = "air_errors.log"

[log]
# 显示日志工夫
time = true

[color]
# 自定义每个局部显示的色彩。如果找不到色彩，应用原始的应用程序日志。
main = "magenta"
watcher = "cyan"
build = "yellow"
runner = "green"

[misc]
# 退出时删除tmp目录
clean_on_exit = true